// Code generated by 'go generate ./...'; DO NOT EDIT.
package engine

import (
	"context"
	"github.com/tetratelabs/wazero/api"
)

func (a *Graphics) Expose(wasm *WasmRuntime) {
	wasm.ConvertAndExpose("GraphicsCircle", a.Circle, wasmCircle)
	wasm.ConvertAndExpose("GraphicsClear", a.Clear, wasmClear)
	wasm.ConvertAndExpose("GraphicsRectangle", a.Rectangle, wasmRectangle)
	wasm.ConvertAndExpose("GraphicsSetTargetSize", a.SetTargetSize, wasmSetTargetSize)
	wasm.ConvertAndExpose("GraphicsText", a.Text, wasmText)
	wasm.ConvertAndExpose("GraphicsTexture", a.Texture, wasmTexture)
	wasm.ConvertAndExpose("GraphicsTextureEx", a.TextureEx, wasmTextureEx)

}

// Wasm wrappers for Graphics

// Calls Graphics.Circle
func wasmCircle(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeF32(stack[0])
	arg1 := api.DecodeF32(stack[1])
	arg2 := api.DecodeF32(stack[2])
	arg3_0 := api.DecodeF32(stack[3])
	arg3_1 := api.DecodeF32(stack[4])
	arg3_2 := api.DecodeF32(stack[5])
	arg3_3 := api.DecodeF32(stack[6])
	arg4 := api.DecodeU32(stack[7])
	brut.Graphics.Circle(
		float32(arg0),
		float32(arg1),
		float32(arg2),
		Color{float32(arg3_0), float32(arg3_1), float32(arg3_2), float32(arg3_3)},
		u32ToBool(arg4),
	)
}

// Calls Graphics.Clear
func wasmClear(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0_0 := api.DecodeF32(stack[0])
	arg0_1 := api.DecodeF32(stack[1])
	arg0_2 := api.DecodeF32(stack[2])
	arg0_3 := api.DecodeF32(stack[3])
	brut.Graphics.Clear(
		Color{float32(arg0_0), float32(arg0_1), float32(arg0_2), float32(arg0_3)},
	)
}

// Calls Graphics.Rectangle
func wasmRectangle(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeF32(stack[0])
	arg1 := api.DecodeF32(stack[1])
	arg2 := api.DecodeF32(stack[2])
	arg3 := api.DecodeF32(stack[3])
	arg4_0 := api.DecodeF32(stack[4])
	arg4_1 := api.DecodeF32(stack[5])
	arg4_2 := api.DecodeF32(stack[6])
	arg4_3 := api.DecodeF32(stack[7])
	arg5 := api.DecodeU32(stack[8])
	brut.Graphics.Rectangle(
		float32(arg0),
		float32(arg1),
		float32(arg2),
		float32(arg3),
		Color{float32(arg4_0), float32(arg4_1), float32(arg4_2), float32(arg4_3)},
		u32ToBool(arg5),
	)
}

// Calls Graphics.SetTargetSize
func wasmSetTargetSize(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeI32(stack[0])
	arg1 := api.DecodeI32(stack[1])
	brut.Graphics.SetTargetSize(
		int32(arg0),
		int32(arg1),
	)
}

// Calls Graphics.Text
func wasmText(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0_0 := api.DecodeU32(stack[0])
	arg0_1 := api.DecodeU32(stack[1])
	arg1 := api.DecodeF32(stack[2])
	arg2 := api.DecodeF32(stack[3])
	brut.Graphics.Text(
		readWasmString(m.Memory(), arg0_0, arg0_1),
		float32(arg1),
		float32(arg2),
	)
}

// Calls Graphics.Texture
func wasmTexture(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeU32(stack[0])
	arg1 := api.DecodeF32(stack[1])
	arg2 := api.DecodeF32(stack[2])
	brut.Graphics.Texture(
		uint32(arg0),
		float32(arg1),
		float32(arg2),
	)
}

// Calls Graphics.TextureEx
func wasmTextureEx(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeU32(stack[0])
	arg1 := api.DecodeF32(stack[1])
	arg2 := api.DecodeF32(stack[2])
	arg3 := api.DecodeF32(stack[3])
	arg4 := api.DecodeF32(stack[4])
	arg5 := api.DecodeF32(stack[5])
	arg6_0 := api.DecodeF32(stack[6])
	arg6_1 := api.DecodeF32(stack[7])
	arg6_2 := api.DecodeF32(stack[8])
	arg6_3 := api.DecodeF32(stack[9])
	brut.Graphics.TextureEx(
		uint32(arg0),
		float32(arg1),
		float32(arg2),
		float32(arg3),
		float32(arg4),
		float32(arg5),
		Color{float32(arg6_0), float32(arg6_1), float32(arg6_2), float32(arg6_3)},
	)
}
