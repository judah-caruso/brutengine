// Code generated by 'go generate ./...'; DO NOT EDIT.
package engine

import (
	"context"
	"github.com/tetratelabs/wazero/api"
)

func (a *Input) Expose(wasm *WasmRuntime) {
	wasm.ConvertAndExpose("InputCursorX", a.CursorX, wasmCursorX)
	wasm.ConvertAndExpose("InputCursorY", a.CursorY, wasmCursorY)
	wasm.ConvertAndExpose("InputDown", a.Down, wasmDown)
	wasm.ConvertAndExpose("InputPressed", a.Pressed, wasmPressed)
	wasm.ConvertAndExpose("InputUp", a.Up, wasmUp)

}

// Wasm wrappers for Input

// Calls Input.CursorX
func wasmCursorX(ctx context.Context, m api.Module, stack []WasmValue) {
	r0 := brut.Input.CursorX()
	stack[0] = api.EncodeF32(float32(r0))
}

// Calls Input.CursorY
func wasmCursorY(ctx context.Context, m api.Module, stack []WasmValue) {
	r0 := brut.Input.CursorY()
	stack[0] = api.EncodeF32(float32(r0))
}

// Calls Input.Down
func wasmDown(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeU32(stack[0])
	r0 := brut.Input.Down(
		InputEvent(arg0),
	)
	stack[0] = api.EncodeU32(boolToU32(r0))
}

// Calls Input.Pressed
func wasmPressed(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeU32(stack[0])
	r0 := brut.Input.Pressed(
		InputEvent(arg0),
	)
	stack[0] = api.EncodeU32(boolToU32(r0))
}

// Calls Input.Up
func wasmUp(ctx context.Context, m api.Module, stack []WasmValue) {
	arg0 := api.DecodeU32(stack[0])
	r0 := brut.Input.Up(
		InputEvent(arg0),
	)
	stack[0] = api.EncodeU32(boolToU32(r0))
}
